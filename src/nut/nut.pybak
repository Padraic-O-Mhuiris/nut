import nix
from nix.expr import Value
from typing import NewType

NixValue = NewType("NixValue", Value)


# import click
# import sys
# from pathlib import Path
# from functools import reduce
# from dataclasses import dataclass

# from nix.expr import Type, Value

# from rich.tree import Tree
# from rich import print


# class NutTestError(Exception):
#     """Raised for errors in the application's logic."""

#     pass


# def eval_equals_assertion(assertion_block):
#     """"""

#     left = assertion_block["left"]
#     right = assertion_block["right"]

#     left_type = left.get_type()
#     right_type = right.get_type()

#     return (left.force(), right.force(), left_type, right_type)


# def eval_assertion(assertion_block):
#     """"""
#     assertion_type = assertion_block["type"].force()

#     if assertion_type == "EQUALS":
#         return eval_equals_assertion(assertion_block)
#     else:
#         return None


# # class NutAssertion:
# #     def __init__(self, node: Value):
# #         print(node)
# #         print(dir(node["left"]))
# #         print((node["left"]).__repr__)
# #         self.node = node
# #         self.kind = node["type"]
# #         self.left = node["left"]
# #         self.right = node["right"]

# #     def __repr__(self):
# #         return f"<NutAssertion({self.kind}, {self.left.__str__}, {self.right})>"


# # def run_tests(_test_tree):
# #     """"""
# #     test_tree = _test_tree.force()

# #     def run_test_block(acc, _node):
# #         node = _node.force()
# #         node_type = node["__test__"].force()
# #         node_id = node["id"].force()
# #         node_message = node["message"].force()
# #         node_value = node["value"].force()

# #         if node_type == "__test_branch__":
# #             return acc | {(node_id): run_tests(_node)}
# #         else:
# #             return acc | {(node_id): NutAssertion(node_value)}

# #     return reduce(run_test_block, test_tree["value"].force(), {})


# def safeNixEval(nix_value: Value):
#     try:
#         return nix_value.force()
#     except:
#         raise NutTestError("Unexpected Evaluation: Could not evaluate nix_value")


# def eval_node_value(nix_value: Value):
#     node = safeNixEval(nix_value)
#     print(node)
#     node_test_type = safeNixEval(node["__test__"])
#     if node_test_type == "__test_branch__":
#         return NutTestBlock(node)
#     elif node_test_type == "__test_case__":
#         return NutTestCase(node)
#     else:
#         return None


# class NutTestBase(NutBase):
#     def __init__(self, nix_value: Value):
#         super().__init__(nix_value)

#         self.nix_value_type = self.nix_value.get_type()
#         if self.nix_value_type != Type.attrs:
#             raise NutTestError(
#                 f"Unexpected type: {self.nix_value_type}, expected {Type.attrs}"
#             )
#         self.message = safeNixEval(self.node["message"])
#         self.raw_value = safeNixEval(self.node["value"])
#         print(self.raw_value)
#         self.value = list(map(eval_node_value, self.raw_value))


# class NutTestCase(NutBase):
#     def __init__(self, nix_value: Value):
#         print("---TestCase---")
#         super().__init__(nix_value)
#         None


# class NutTestBlock(NutTestBase):
#     def __init__(self, nix_value: Value):
#         # super().__init__(nix_value)
#         None


# class NutTest(NutTestBase):
#     def __init__(self, nix_value: Value):
#         super().__init__(nix_value)

#         # print(self.raw_value)
#         # (tree, type) = self.__validate(value)
#         # self.tree = tree
#         # self.type = type
#         # self.value = self.tree["value"].force()
#         # self.message = self.tree["message"].force()
#         # self.node =

#     def __str__(self):
#         return f"NutTest({self.nix_value.get_type()})"

#     # def __validate(self, value: Value):
#     #     type = value.get_type()
#     #     if type != Type.attrs:
#     #         raise NutTestError(f"Unexpected type: {self.value_type}, expected attrset")

#     #     tree = value.force()
#     #     if tree["__test__"].force() != "__test_root__":
#     #         raise NutTestError("attrset value is not test root")

#     #     return (tree, type)


# @click.command()
# @click.argument(
#     "flake_ref",
#     type=click.STRING,
#     default=".",
# )
# def exec_args(flake_ref: str):
#     """
#     Lets do some nutty testing

#     [FLAKE_DIR] by default will be the current directory if no argument is specified
#     """

#     relative_flake_path = None
#     target_flake_output = None

#     if "#" not in flake_ref:
#         relative_flake_path = flake_ref
#         target_flake_output = "test"
#     else:
#         (relative_flake_path, target_flake_output) = flake_ref.split("#")

#     flake_path = str((Path(relative_flake_path)).absolute())

#     flake = nix.eval("builtins.getFlake")(flake_path).force()
#     test_tree = flake.get(target_flake_output)  # .force().get(target_flake_output)

#     # print(test_tree.force())
#     # test_tree_message = test_tree.force()["message"]

#     # display_tree = Tree(f"Test: {test_tree_message}")
#     t = NutTest(test_tree)
#     # print(display_tree)


# # print(test_tree.force())
# # print(test_tree_map(lambda x: x, test_tree))

# # flake_output_keys = flake.force().keys()

# # if flake.force().get("test") is None:
# #     raise NutTestError("Could not find test attribute in flake output attrset")

# # if file_path.is_file():
# #     print(f"The file 'flake.nix' exists in {directory}")
# # else:
# #     print(f"The file {filename} does not exist in {directory}")
# # if ctx is None:
# #     raise click.UsageError("No flake path passed as argument", None)
# # print(flake)
# # if os.path.join(flake, "flake.nix"):
# #     null
# # else:
# # click.echo(click.format_filename(flake))


# if __name__ == "__main__":
#     exec_args()
